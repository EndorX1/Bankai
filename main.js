/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Bankai
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var path = __toESM(require("path"));
var fs = __toESM(require("fs"));
var VIEW_TYPE_TABLE = "table-view";
var DEFAULT_SETTINGS = {
  DownloadInterval: 10,
  DownloadDirectory: "",
  PluginEnabled: true
};
var COL_NAME = "Name of the file";
var COL_SUBJECT = "Subject";
var COL_FOLDER = "Folder Path to the file";
var COL_DATE = "Date Added";
var Bankai = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.intervalId = null;
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({ id: "SyncDB", name: "Sync Database", callback: () => this.SyncDatabase("sync") });
    this.registerView(VIEW_TYPE_TABLE, (leaf) => new TableView(leaf, this));
    this.addRibbonIcon("table", "Open Database Searcher", () => {
      this.activateView();
    });
    this.addSettingTab(new BankaiSettingTab(this.app, this));
    this.startInterval(this.settings.DownloadInterval);
  }
  onunload() {
    if (this.intervalId !== null) {
      window.clearInterval(this.intervalId);
      this.intervalId = null;
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async isExeRunning(exeName) {
    return new Promise((resolve) => {
      (0, import_child_process.exec)("tasklist", (err, stdout) => {
        if (err) {
          resolve(false);
          return;
        }
        const running = stdout.toLowerCase().includes(exeName.toLowerCase());
        resolve(running);
      });
    });
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_TABLE);
    leaf = leaves.length > 0 ? leaves[0] : workspace.getRightLeaf(false);
    await (leaf == null ? void 0 : leaf.setViewState({ type: VIEW_TYPE_TABLE, active: true }));
    workspace.revealLeaf(leaf);
  }
  startInterval(minutes) {
    if (!this.settings.PluginEnabled) {
      if (this.intervalId !== null) {
        window.clearInterval(this.intervalId);
        this.intervalId = null;
      }
      return;
    }
    if (this.intervalId !== null) {
      window.clearInterval(this.intervalId);
    }
    const ms = Math.max(1, Math.floor(minutes)) * 60 * 1e3;
    this.intervalId = window.setInterval(() => this.SyncDatabase("sync"), ms);
    this.registerInterval(this.intervalId);
  }
  SyncDatabase(code) {
    const vaultBasePath = this.app.vault.adapter.basePath;
    const pluginId = this.manifest.id;
    const targetDir = path.join(vaultBasePath, this.settings.DownloadDirectory);
    const scriptPath = path.join(vaultBasePath, ".obsidian", "plugins", pluginId, "dependencies", "sync.exe");
    const args = [targetDir, code];
    this.isExeRunning("sync.exe").then((running) => {
      if (running) {
        new import_obsidian.Notice("Already running");
        return;
      }
      const subprocess = (0, import_child_process.spawn)(scriptPath, args);
      subprocess.on("error", (err) => {
        new import_obsidian.Notice(`Failed to start sync: ${String(err)}`);
      });
      subprocess.stdout.on("data", (data) => {
        new import_obsidian.Notice(String(data));
      });
      subprocess.stderr.on("data", (data) => {
        new import_obsidian.Notice(String(data));
      });
    });
  }
  resetData() {
    const vaultBasePath = this.app.vault.adapter.basePath;
    const pluginId = this.manifest.id;
    const purgePath = path.join(vaultBasePath, ".obsidian", "plugins", pluginId, "t-o");
    fs.rmSync(purgePath, { recursive: true, force: true });
    new import_obsidian.Notice("Data reset complete");
  }
};
var TableView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.allData = [];
    this.filteredData = [];
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE_TABLE;
  }
  getDisplayText() {
    return "Table View";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    if (!container)
      return;
    container.empty();
    container.createEl("h2", { text: "Data Table" });
    try {
      this.allData = await this.loadJsonData();
      this.filteredData = [...this.allData];
      this.createControls(container);
      this.createTable(container, this.filteredData);
    } catch (e) {
      const msg = e instanceof Error ? e.message : String(e);
      container.createEl("p", { text: "Error loading data: " + msg });
    }
  }
  async loadJsonData() {
    const adapter = this.app.vault.adapter;
    const pluginId = this.plugin.manifest.id;
    const dataPath = `.obsidian/plugins/${pluginId}/dependencies/database.json`;
    const raw = await adapter.read(dataPath);
    const json = JSON.parse(raw);
    return this.extractFiles(json);
  }
  extractFiles(data) {
    const files = [];
    const traverse = (obj, subject, curPath) => {
      for (const key in obj) {
        if (key === "__FileData__" && typeof obj[key] === "object" && obj[key]) {
          for (const fileName in obj[key]) {
            files.push({
              [COL_NAME]: fileName,
              [COL_SUBJECT]: subject,
              [COL_FOLDER]: curPath,
              [COL_DATE]: String(obj[key][fileName])
            });
          }
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          const newPath = curPath ? `${curPath}/${key}` : key;
          traverse(obj[key], subject, newPath);
        }
      }
    };
    for (const subject in data) {
      traverse(data[subject], subject, subject);
    }
    return files;
  }
  createControls(container) {
    const controlsDiv = container.createEl("div");
    controlsDiv.style.marginBottom = "20px";
    const searchInput = controlsDiv.createEl("input");
    searchInput.type = "text";
    searchInput.placeholder = "Search files...";
    searchInput.style.width = "100%";
    searchInput.style.padding = "8px";
    searchInput.style.marginBottom = "10px";
    searchInput.addEventListener("input", () => this.filterData(searchInput.value));
    const buttonsDiv = controlsDiv.createEl("div");
    buttonsDiv.style.marginBottom = "10px";
    const nameBtn = buttonsDiv.createEl("button", { text: "Sort by Name" });
    nameBtn.style.marginRight = "10px";
    nameBtn.addEventListener("click", () => this.sortData(COL_NAME));
    const subjectBtn = buttonsDiv.createEl("button", { text: "Sort by Subject" });
    subjectBtn.addEventListener("click", () => this.sortData(COL_SUBJECT));
    const timeBtn = buttonsDiv.createEl("button", { text: "Sort by Time" });
    timeBtn.style.marginLeft = "10px";
    timeBtn.addEventListener("click", () => this.sortDataReverse(COL_DATE));
    const subjectButtonsDiv = controlsDiv.createEl("div");
    subjectButtonsDiv.style.marginBottom = "10px";
    const subjects = [...new Set(this.allData.map((item) => item[COL_SUBJECT]))];
    const allBtn = subjectButtonsDiv.createEl("button", { text: "All" });
    allBtn.style.marginRight = "10px";
    allBtn.addEventListener("click", () => this.filterBySubject(""));
    subjects.forEach((subject) => {
      const btn = subjectButtonsDiv.createEl("button", { text: subject });
      btn.style.marginRight = "10px";
      btn.addEventListener("click", () => this.filterBySubject(subject));
    });
    const timeButtonsDiv = controlsDiv.createEl("div");
    const todayBtn = timeButtonsDiv.createEl("button", { text: "Today" });
    todayBtn.style.marginRight = "10px";
    todayBtn.addEventListener("click", () => this.filterByDays(0));
    const daysLabel = timeButtonsDiv.createEl("span", { text: "Last Days:" });
    daysLabel.style.marginRight = "5px";
    const daysInput = timeButtonsDiv.createEl("input");
    daysInput.type = "number";
    daysInput.placeholder = "7";
    daysInput.style.width = "50px";
    daysInput.style.marginRight = "5px";
    daysInput.style.marginLeft = "10px";
    daysInput.addEventListener("input", () => {
      const days = parseInt(daysInput.value, 10);
      if (!Number.isNaN(days))
        this.filterByDays(days);
    });
  }
  filterData(searchTerm) {
    const term = searchTerm.trim().toLowerCase();
    if (!term) {
      this.filteredData = [...this.allData];
    } else {
      this.filteredData = this.allData.filter(
        (item) => item[COL_NAME].toLowerCase().includes(term) || item[COL_SUBJECT].toLowerCase().includes(term) || item[COL_FOLDER].toLowerCase().includes(term) || item[COL_DATE].toLowerCase().includes(term)
      );
    }
    this.updateTable();
  }
  sortData(field) {
    this.filteredData.sort((a, b) => a[field].localeCompare(b[field]));
    this.updateTable();
  }
  sortDataReverse(field) {
    this.filteredData.sort((a, b) => b[field].localeCompare(a[field]));
    this.updateTable();
  }
  filterBySubject(subject) {
    if (!subject) {
      this.filteredData = [...this.allData];
    } else {
      this.filteredData = this.allData.filter((item) => item[COL_SUBJECT] === subject);
    }
    this.updateTable();
  }
  filterByDays(days) {
    const now = new Date();
    const cutoff = new Date(now.getFullYear(), now.getMonth(), now.getDate() - days);
    const cutoffStr = cutoff.toISOString().split("T")[0];
    this.filteredData = this.allData.filter((item) => item[COL_DATE].split(" ")[0] >= cutoffStr);
    this.updateTable();
  }
  updateTable() {
    const container = this.containerEl.children[1];
    if (!container)
      return;
    const existing = container.querySelector("table");
    if (existing)
      existing.remove();
    this.createTable(container, this.filteredData);
  }
  createTable(container, data) {
    if (!data || data.length === 0) {
      container.createEl("p", { text: "No data available." });
      return;
    }
    const keys = Object.keys(data[0]);
    const table = container.createEl("table");
    table.style.width = "100%";
    table.style.borderCollapse = "collapse";
    const thead = table.createEl("thead");
    const headerRow = thead.createEl("tr");
    keys.forEach((key) => {
      const th = headerRow.createEl("th");
      th.textContent = key;
      th.style.border = "1px solid var(--background-modifier-border)";
      th.style.padding = "8px";
      th.style.backgroundColor = "var(--background-secondary)";
    });
    const tbody = table.createEl("tbody");
    data.forEach((row) => {
      const tr = tbody.createEl("tr");
      keys.forEach((key) => {
        const td = tr.createEl("td");
        td.textContent = row[key];
        td.style.border = "1px solid var(--background-modifier-border)";
        td.style.padding = "8px";
        if (key === COL_NAME) {
          td.style.cursor = "pointer";
          td.style.color = "var(--text-accent)";
          td.addEventListener("click", () => {
            const fullPath = `${row[COL_FOLDER]}/${row[key]}`;
            navigator.clipboard.writeText(fullPath);
            new import_obsidian.Notice("Copied path to clipboard");
          });
        }
      });
    });
    container.appendChild(table);
  }
  async onClose() {
  }
};
var BankaiSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Enable").setDesc("Enables Plugin").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.PluginEnabled).onChange(async (value) => {
        this.plugin.settings.PluginEnabled = value;
        await this.plugin.saveData(this.plugin.settings);
        this.plugin.startInterval(this.plugin.settings.DownloadInterval);
      })
    );
    new import_obsidian.Setting(containerEl).setName("Download Interval (min)").setDesc("Time interval to update file database").addText(
      (text) => text.setPlaceholder("Minutes").setValue(String(this.plugin.settings.DownloadInterval)).onChange(async (value) => {
        const minutes = parseInt(value, 10);
        this.plugin.settings.DownloadInterval = Number.isNaN(minutes) ? DEFAULT_SETTINGS.DownloadInterval : minutes;
        await this.plugin.saveData(this.plugin.settings);
        this.plugin.startInterval(this.plugin.settings.DownloadInterval);
      })
    );
    new import_obsidian.Setting(containerEl).setName("Directory").setDesc("File saving location").addText(
      (text) => text.setPlaceholder("").setValue(this.plugin.settings.DownloadDirectory).onChange(async (value) => {
        this.plugin.settings.DownloadDirectory = value;
        await this.plugin.saveData(this.plugin.settings);
      })
    );
    new import_obsidian.Setting(containerEl).setName("Run Setup").setDesc("Initialize the plugin and download dependencies").addButton((button) => {
      button.setButtonText("Run Setup").onClick(() => this.plugin.SyncDatabase("setup"));
    });
    new import_obsidian.Setting(containerEl).setName("Reset Data").setDesc("Clear browser data and cookies. If you experience problems, try this.").addButton(
      (button) => button.setButtonText("Reset Data").onClick(() => new ResetConfirmModal(this.app, () => this.plugin.resetData()).open())
    );
  }
};
var ResetConfirmModal = class extends import_obsidian.Modal {
  constructor(app, callback) {
    super(app);
    this.callback = callback;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Are you sure?" });
    contentEl.createEl("p", { text: "You will have to run setup again." });
    const buttonDiv = contentEl.createEl("div");
    buttonDiv.style.display = "flex";
    buttonDiv.style.gap = "10px";
    buttonDiv.style.justifyContent = "center";
    buttonDiv.style.marginTop = "20px";
    const yesBtn = buttonDiv.createEl("button", { text: "Yes" });
    yesBtn.addEventListener("click", () => {
      this.callback();
      this.close();
    });
    const noBtn = buttonDiv.createEl("button", { text: "No" });
    noBtn.addEventListener("click", () => this.close());
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
